generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../prisma/EAR.png"
}

model Users {
  id                Int                 @id @default(autoincrement())
  username          String              @unique @db.VarChar(255)
  email             String              @unique
  password          String
  is_active         Boolean             @default(true)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now()) @db.Timestamp(0)
  HistoricalOnUsers HistoricalOnUsers[]

  @@index([id, username, email])
  @@map("users")
}

model Locations {
  id         Int         @id @default(autoincrement())
  name       String
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now()) @db.Timestamp(0)
  Suitcases  Suitcases[]

  @@index([id])
  @@map("locations")
}

model Suitcases {
  id          Int       @id @default(autoincrement())
  protocol    String
  locations   Locations @relation(fields: [locationsId], references: [id])
  locationsId Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @db.Timestamp(0)
  Volumes     Volumes[]

  @@index([id])
  @@map("suitcases")
}

model Types {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @db.Timestamp(0)
  Volumes    Volumes[]

  @@index([id])
  @@map("types")
}

model Volumes {
  id                  Int                   @id @default(autoincrement())
  name                String
  types               Types                 @relation(fields: [typesId], references: [id])
  typesId             Int
  suitcases           Suitcases             @relation(fields: [suitcasesId], references: [id])
  suitcasesId         Int
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now()) @db.Timestamp(0)
  HistoricalOnVolumes HistoricalOnVolumes[]

  @@index([id])
  @@map("volumes")
}

enum ENUM_HISTORICAL {
  PROHIBITED
  EXIT
}

model Historical {
  id                  Int                   @id @default(autoincrement())
  types               ENUM_HISTORICAL
  seal                String
  shipping            DateTime              @db.Date // shipping => envio
  back                DateTime?             @db.Date // back => voltando
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now()) @db.Timestamp(0)
  HistoricalOnVolumes HistoricalOnVolumes[]
  HistoricalOnUsers   HistoricalOnUsers[]

  @@index([id])
  @@map("historical")
}

model HistoricalOnVolumes {
  id Int @id @default(autoincrement())

  historical   Historical @relation(fields: [historicalId], references: [id])
  historicalId Int

  volumes   Volumes @relation(fields: [volumesId], references: [id])
  volumesId Int

  @@index([id])
  @@map("historicalOnVolumes")
}

model HistoricalOnUsers {
  id           Int        @id @default(autoincrement())
  historical   Historical @relation(fields: [historicalId], references: [id])
  historicalId Int

  users   Users @relation(fields: [usersId], references: [id])
  usersId Int

  @@index([id])
  @@map("historicalOnUsers")
}

model logs {
  id        Int     @id @default(autoincrement())
  name_json String? @db.Text
}
